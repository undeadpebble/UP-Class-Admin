import ClassAdminBackEnd.*;
import java.awt.Color;
import java.util.Date;
import java.util.LinkedList;
import java.lang.reflect.Array;

COMPILER Pdat $NC

CHARACTERS
  digit      = "0123456789!@#$%^&*()_+-}{';:\\/?><`~" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  apos = "\"".
  space = " .".

TOKENS
  data = (letter | digit) { letter | digit } .
  str = apos { letter | digit | space} apos.

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Pdat
  =
  "Project" 
			(. Global.getGlobal().getProjects().set(Global.getGlobal().getActiveProjectIndex(), new Project());.) 
		"["
		"entityTypes=" 
			(.Global.getGlobal().getActiveProject().getEntityTypes().clear();.)
		( "null" | "[" EntityType {"," EntityType} "]")
		"," "head=" MarkEntity<out MarkEntity head>
			(.Global.getGlobal().getActiveProject().setHead(head);.)
		"]"
  .

  EntityType 
  =
  "EntityType" "["
	(. EntityType ent = new EntityType("");
		Global.getGlobal().getActiveProject().getEntityTypes().add(ent);.)
		
		"name=" pString<out String name>
			(.ent.setName(name);.)
		
		"," "fields=" "[" ("]" | pString<out String field>
			(.ent.getFields().add(field);.)
		{"," pString<out field>
			(.ent.getFields().add(field);.)
		} "]")
		
		"," "visibleFields=" ("[" ("]" | 
			(.LinkedList<Boolean> tempBoolList = new LinkedList<Boolean>();.)
		Boolean<out Boolean bool>
			(.tempBoolList.add(bool);.)
		{"," Boolean<out bool>
			(.tempBoolList.add(bool);.)
		} "]"
			(.ent.setVisibleFields(pdatImport.toBoolArray(tempBoolList));.)
		) | "null")
			
		
		"," "fieldDefaults=" "[" ("]" | pString<out String fieldDef> 
			(.ent.getFieldDefaults().add(fieldDef);.)
		{"," pString<out fieldDef>
			(.ent.getFieldDefaults().add(fieldDef);.)
		} "]")
		
		"," "formatting=" "[" ("]" | Format<out Format format> 
			(.ent.getFormatting().add(format);.)
		{"," Format<out format>
			(.ent.getFormatting().add(format);.)
		} "]")
		
		"," "borderCasing=" "[" ("]" | BorderCase<out BorderCase border> 
			(.ent.getBorderCasing().add(border);.)
		{"," BorderCase<out border> 
			(.ent.getBorderCasing().add(border);.)
		} "]")
		
		"," "isTextField=" Boolean<out Boolean isText>
			(.ent.setIsTextField(isText);.)
			
		"," "date=" pString<out String date>
			(.ent.setDate(pdatImport.ParseDate(date));.)
			
		"," "isVisible=" Boolean<out Boolean isVis>
			(.ent.setIsVisible(isVis);.)
			
		"," "defaultWeight=" Double<out double Weight>
			(.ent.setDefaultWeight(Weight);.)
			
		"," "index=" Integer<out int i>
			(.ent.setIndex(i);.)
		"]"
  .

  MarkEntity<out MarkEntity returnValue>
  =
  "MarkEntity" "["
			
		"mark=" Double<out Double mark>
		
		"," "details=" EntityDetails<out EntityDetails enDetails>
			(.returnValue = new MarkEntity(enDetails,mark);.)
			
		"," "subEntityWeight=" "[" ("]" | Double<out double weight>
			(.returnValue.getSubEntityWeight().add(weight);.)
			
		{"," Double<out weight>
			(.returnValue.getSubEntityWeight().add(weight);.)
		} "]")
		
		"," "subEntity=" "[" ("]" | MarkEntity<out MarkEntity child>
			(.returnValue.getSubEntity().add(child);
			child.setParentEntity(returnValue);.)
			
		{"," MarkEntity<out child>
			(.returnValue.getSubEntity().add(child);
			child.setParentEntity(returnValue);.)
		} "]")
		"]"
  .
  EntityDetails<out EntityDetails returnValue>
  =
  "EntityDetails" "["
		"type=" Integer<out int type>
			(.returnValue = new EntityDetails(type);.)
			
		"," "fields=" "[" ("]" | pString<out String field> 
			(.returnValue.getFields().add(field);.)
			
		{"," pString<out field>
			(.returnValue.getFields().add(field);.)
		} "]")
		
		"," "Picture=" pString<out String pic>
			(.returnValue.setPicture(pic);.)
			
		"," "absentExcuse=" Boolean<out Boolean absentEx>
			(.returnValue.setAbsentExcuse(absentEx);.)
		"]"
  .
  BorderCase<out BorderCase returnValue>
  = "BorderCase" "["
		"lowVal=" Double<out Double lVal>
		"," "highVal=" Double<out Double hVal>
			(.returnValue = new BorderCase(lVal,hVal);.)
		"]"
  .

  Format<out Format returnValue>
  =
  "Format" "["
		"condition=" Integer<out int cond>
		"," "priority=" Integer<out int prior>
		"," "value1=" Double<out Double val1>
		"," "value2=" Double<out Double val2>
		"," "textColor=" Color<out Color tCol>
		"," "highlightColor=" Color<out Color hCol>
		"," "description=" pString <out String desc>
			(.returnValue = new Format(cond,prior,val1,val2,tCol,hCol,desc);.)
		"]"
  .

  Color<out Color returnValue>
  = "java.awt.Color["
		"r=" Integer<out int r>
		"," "g=" Integer<out int g>
		"," "b=" Integer<out int b>
		(.returnValue = new Color(r,g,b);.)
		"]"
  .

  Double<out Double returnValue>
	(.String doub ="";.)
  = data 
	(.doub += token.val;.)
  "." data 
	(.doub += "."+token.val;
	returnValue = Double.parseDouble(doub);.)
  .

  Integer<out int returnValue>
  = data
	(.returnValue = Integer.parseInt(token.val);.)
  .

  pString<out String returnValue>
  = 		
   str 
		
		(. returnValue = token.val.substring(1,token.val.length()-1);.)

  .

  Boolean<out Boolean returnValue>
  = (.returnValue = false;.)
  ("true" (.returnValue = true;.)| "false" (.returnValue = false;.))
  .

END Pdat
.